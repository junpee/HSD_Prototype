<#--
Automated web application generator

Licensed Materials - Property of IBM
"Restricted Materials of IBM"
IPSC : 6949-63S
(C) Copyright IBM Japan, Ltd. 2016 All Rights Reserved.
(C) Copyright IBM Corp. 2016 All Rights Reserved.
US Government Users Restricted Rights -
Use, duplication or disclosure restricted
by GSA ADP Schedule Contract with IBM Corp.
 -->
/** Generated by AWAG ver.${AWAGversion} at ${.now?iso_local} */

package ${resource.packageName}.model;

import java.sql.Timestamp;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.groups.Default;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import com.ibm.jp.awag.rest.common.model.DisplayName;
import com.ibm.jp.awag.rest.common.model.EntityBase;
import com.ibm.jp.awag.rest.common.model.ResourceVersionTimestampImpl;
import com.ibm.jp.awag.rest.common.model.ResourceVersionLongImpl;
import com.ibm.jp.awag.rest.common.model.ResourceVersionNotlockImpl;
import com.ibm.jp.awag.rest.common.util.TimestampConverter;
import com.ibm.jp.awag.rest.common.validator.DateTime;
import com.ibm.jp.awag.rest.common.validator.Number;
import com.ibm.jp.awag.rest.common.validator.StringFormat;
import com.ibm.jp.awag.rest.common.validator.group.DeleteGroup;
import com.ibm.jp.awag.rest.common.validator.group.QueryGroup;
import static com.ibm.jp.awag.rest.common.util.TextUtility.*;
import ${resource.packageName}.validator.${resource.resourceName}Validation;

/**
 * ${resource.resourceName}のEntityクラス。
 *
 */
<#-- クラスアノテーション -->
@${resource.resourceName}Validation
@Entity
@Access(AccessType.PROPERTY)
@XmlAccessorType(XmlAccessType.PROPERTY)
<#if resource.schemaName??>
@Table(name = "${resource.tableName}", schema="${resource.schemaName}")
<#else>
@Table(name = "${resource.tableName}")
</#if>
@XmlRootElement(name = "${resource.resourceName}")
<@compress single_line=true>
@XmlType(propOrder = {<#t>
	<#list resource.columnDefinitions as column>
		<#if column.version>
		"${column.fieldName}_json"<#sep>, <#t>		
		<#else>
		"${column.fieldName}"<#sep>, <#t>
		</#if>
	</#list>
})<#t>
</@compress>

<#-- クラス -->
public class ${resource.resourceName} extends EntityBase <${resource.resourceName}PK, ${resource.versionType.javaType}> {

<#-- フィールド -->
	/** 主キー */
	@Valid
	private ${resource.resourceName}PK pk = new ${resource.resourceName}PK();
	
<#list resource.columnDefinitions as column>
<#if !column.pk>
	/** ${column.displayName}(${column.fieldName}) */
	@DisplayName(name = "${column.displayName}")
	<#if !column.allowedNull>
	@NotNull
	</#if>
	<#if column.formatValidationRule??>
	<#if column.searchParam && column.formatValidationRule.length != 0 && column.conditionOperator != "EXACT">
		<#if column.formatValidationRule.formatType == "DECIMAL">
	@Number(type = Number.Type.DECIMAL, integer=${column.formatValidationRule.maxLength}, fraction = ${column.formatValidationRule.minLength})<#rt>
		<#elseif column.formatValidationRule.formatType == "INTEGER" || column.formatValidationRule.formatType == "SMALLINT" || column.formatValidationRule.formatType = "BIGINT" || column.formatValidationRule.formatType = "FLOAT">
			${"\t"}<@compress single_line=true><#t>
	@Number.List({
	
		@Number(type = Number.Type.INTEGER<#rt>
			<#if column.formatValidationRule.minLength??>
				<#if column.formatValidationRule.minLength != 0>
				, minLength = ${column.formatValidationRule.minLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.maxLength??>
				<#if column.formatValidationRule.maxLength != 0>
				, maxLength = ${column.formatValidationRule.maxLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.length??>
				<#if column.formatValidationRule.length != 0>
				, length = ${column.formatValidationRule.length}<#t>
				</#if>
			</#if>
			, groups = {Default.class, DeleteGroup.class}),<#t>
		@Number(type = Number.Type.INTEGER<#rt>
			<#if column.formatValidationRule.minLength??>
				<#if column.formatValidationRule.minLength != 0>
				, minLength = ${column.formatValidationRule.minLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.maxLength??>
				<#if column.formatValidationRule.maxLength != 0>
				, maxLength = ${column.formatValidationRule.maxLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.length??>
				<#if column.formatValidationRule.length != 0>
				, maxLength = ${column.formatValidationRule.length}<#t>
				</#if>
			</#if>
			, groups = QueryGroup.class)<#t>
	})<#t>
			</@compress>
		<#elseif column.formatValidationRule.formatType == "DATE">
	@DateTime(type=DateTime.Type.DATE)<#rt>
		<#elseif column.formatValidationRule.formatType == "TIMESTAMP">	
	@DateTime(type=DateTime.Type.TIMESTAMP)<#rt>		
		<#else>
	@StringFormat.List({
	${"\t"}<@compress single_line=true>
		@StringFormat(type = ${column.formatValidationRule.formatType.formatType}<#rt>
			<#if column.formatValidationRule.minLength??>
				<#if column.formatValidationRule.minLength != 0>
				, minLength = ${column.formatValidationRule.minLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.maxLength??>
				<#if column.formatValidationRule.maxLength != 0>
				, maxLength = ${column.formatValidationRule.maxLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.length??>
				<#if column.formatValidationRule.length != 0>
				, length = ${column.formatValidationRule.length}<#t>
				</#if>
			</#if>
			, groups = {Default.class, DeleteGroup.class}),<#t>
	</@compress><#t>

	${"\t"}<@compress single_line=true>
		@StringFormat(type = ${column.formatValidationRule.formatType.formatType}<#rt>
			<#if column.formatValidationRule.minLength??>
				<#if column.formatValidationRule.minLength != 0>
				, minLength = ${column.formatValidationRule.minLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.maxLength??>
				<#if column.formatValidationRule.maxLength != 0>
				, maxLength = ${column.formatValidationRule.maxLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.length??>
				<#if column.formatValidationRule.length != 0>
				, maxLength = ${column.formatValidationRule.length}<#t>
				</#if>
			</#if>
			, groups = QueryGroup.class)<#t>
			})<#t>
	</@compress>
		</#if>	
	<#else>
		<#if column.formatValidationRule.formatType == "DECIMAL">
	@Number(type = Number.Type.DECIMAL, integer=${column.formatValidationRule.maxLength}, fraction = ${column.formatValidationRule.minLength}<#if column.searchParam>, groups = {Default.class, QueryGroup.class}</#if>)<#rt>
		<#elseif column.formatValidationRule.formatType == "INTEGER" || column.formatValidationRule.formatType == "SMALLINT" || column.formatValidationRule.formatType = "BIGINT" || column.formatValidationRule.formatType = "FLOAT">
			${"\t"}<@compress single_line=true><#t>
			@Number(type = Number.Type.INTEGER<#rt>
			<#if column.formatValidationRule.minLength??>
				<#if column.formatValidationRule.minLength != 0>
				, minLength = ${column.formatValidationRule.minLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.maxLength??>
				<#if column.formatValidationRule.maxLength != 0>
				, maxLength = ${column.formatValidationRule.maxLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.length??>
				<#if column.formatValidationRule.length != 0>
				, length = ${column.formatValidationRule.length}<#t>
				</#if>
			</#if><#t>
			<#if column.searchParam>, groups = {Default.class, QueryGroup.class}</#if><#t>
			)<#t>
			</@compress><#rt>
		<#elseif column.formatValidationRule.formatType == "DATE">
	@DateTime(type=DateTime.Type.DATE<#if column.searchParam>, groups = {Default.class, QueryGroup.class}</#if>)<#rt>
		<#elseif column.formatValidationRule.formatType == "TIMESTAMP">
			<#if column.version>
	@DateTime(type=DateTime.Type.TIMESTAMP, groups = {Default.class, QueryGroup.class, DeleteGroup.class})<#rt>
			<#else>
	@DateTime(type=DateTime.Type.TIMESTAMP<#if column.searchParam>, groups = {Default.class, QueryGroup.class}</#if>)<#rt>	
			</#if>
		<#else>
			${"\t"}<@compress single_line=true><#t>
			@StringFormat(type = ${column.formatValidationRule.formatType.formatType}<#rt>
			<#if column.formatValidationRule.minLength??>
				<#if column.formatValidationRule.minLength != 0>
				, minLength = ${column.formatValidationRule.minLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.maxLength??>
				<#if column.formatValidationRule.maxLength != 0>
				, maxLength = ${column.formatValidationRule.maxLength}<#t>
				</#if>
			</#if>
			<#if column.formatValidationRule.length??>
				<#if column.formatValidationRule.length != 0>
				, length = ${column.formatValidationRule.length}<#t>
				</#if>
			</#if>
			<#if column.searchParam>, groups = {Default.class, QueryGroup.class}</#if><#t>
			)<#t>
				</@compress>
			</#if>
		</#if>
	</#if>

	<#if column.version>
	private String _json_${column.fieldName};
	<#else>
	private ${column.dataType.javaType} ${column.fieldName};
	</#if>
	
</#if>
</#list>
<#-- コンストラクタ1 -->
	/**
	 * デフォルト・コンストラクタ。
	 */
	public ${resource.resourceName}() {
		super();
<#if resource.versionType == "TIMESTAMP">
		super._resourceVersion = new ResourceVersionTimestampImpl();
<#elseif resource.versionType == "FLOAT">
		super._resourceVersion = new ResourceVersionLongImpl();
<#else>
		super._resourceVersion = new ResourceVersionNotlockImpl();
</#if>
	}

<#-- コンストラクタ2 -->
	/**
	 * Entityのフィールド値を指定してインスタンスを初期化する。
	<#list resource.columnDefinitions as column>
	 * @param ${column.fieldName} ${column.displayName}
	</#list>
	 */
	${"\t"}<@compress single_line=true><#t>
		public ${resource.resourceName} (<#t>
		<#list resource.columnDefinitions as column>
			${column.dataType.javaType} ${column.fieldName}<#sep>, <#t>
		</#list>
		) {<#t>
	</@compress>

<#if resource.versionType == "TIMESTAMP">
		super._resourceVersion = new ResourceVersionTimestampImpl();
<#elseif resource.versionType == "FLOAT">
		super._resourceVersion = new ResourceVersionLongImpl();
<#else>
		super._resourceVersion = new ResourceVersionNotlockImpl();
</#if>
		
	<#list resource.columnDefinitions as column>
		<#if column.version>
		this.set${column.fieldName?cap_first}_json(${column.fieldName});
		<#else>
		this.set${column.fieldName?cap_first}(${column.fieldName});
		</#if>
	</#list>
	}

<#-- アクセサ -->
	/**
	 * 主キーを取得する。
	 * @return 主キーオブジェクト
	 */
	@XmlTransient
	@EmbeddedId
	@Override
	public ${resource.resourceName}PK getPk() {
		return this.pk;
	}

	/**
	 * 主キーを設定する。
	 * @param 主キーオブジェクト
	 */
	@Override
	public void setPk(${resource.resourceName}PK pk) {
		this.pk = (${resource.resourceName}PK) pk;
	}
<#list resource.columnDefinitions as column>

	<#if column.version>
	/**
	 * ${column.fieldName}のDB値を取得する。
	 * @return ${column.fieldName}のDB値
	 */
	@XmlTransient
	@Version
	<#else>
	/**
	 * ${column.fieldName}を取得する。
	 * @return ${column.fieldName}
	 */
	</#if>
	<#if column.formatValidationRule??>
	<#if column.formatValidationRule.formatType == "TIMESTAMP" && !column.version>
	@Convert(converter = TimestampConverter.class)
	</#if>
	</#if>	
	<#if !column.pk>
	@Column(name = "${column.columnName}")
	<#else>
	@Transient	
	</#if>
	<#if column.version>
	public ${resource.versionType.javaType} get${column.fieldName?cap_first}_db() {	
		return super.get_resourceVersion();
	}
	<#else>
	public ${column.dataType.javaType} get${column.fieldName?cap_first}() {
	<#if column.pk>
		return this.pk.get${column.fieldName?cap_first}();
	<#else>
		return this.${column.fieldName};
	</#if>
	}
	</#if>
	<#if column.version>

	/**
	 * ${column.fieldName}のJSON値を取得する。
	 * @return ${column.fieldName}のJSON値
	 */
	@XmlElement(name="${column.fieldName}")
	@Transient	
	public String get${column.fieldName?cap_first}_json() {
		return super.get_resourceVersionString();
	}
	</#if>

	<#if column.version>
	/**
	 * ${column.fieldName}のDB値を設定する。
	 * @param ${column.fieldName}のDB値
	 */
	public void set${column.fieldName?cap_first}_db(${resource.versionType.javaType} ${column.fieldName}) {
		super.set_resourceVersion(${column.fieldName});
	}

	/**
	 * ${column.fieldName}のJSON値を設定する。
	 * @param ${column.fieldName}のJSON値
	 */
	public void set${column.fieldName?cap_first}_json(String ${column.fieldName}) {
		super.set_resourceVersionString(emptyStringToNull(${column.fieldName}));
	}
	<#else>
	/**
	 * ${column.fieldName}を設定する。
	 * @param ${column.fieldName}
	 */
	public void set${column.fieldName?cap_first}(${column.dataType.javaType} ${column.fieldName}) {
	<#if column.pk>
		this.pk.set${column.fieldName?cap_first}(emptyStringToNull(${column.fieldName}));
	<#else>
		this.${column.fieldName} = emptyStringToNull(${column.fieldName});
	</#if>
	}
	</#if>
</#list>
}