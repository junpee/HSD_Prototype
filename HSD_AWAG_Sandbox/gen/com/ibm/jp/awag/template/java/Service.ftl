<#--
Automated web application generator

Licensed Materials - Property of IBM
"Restricted Materials of IBM"
IPSC : 6949-63S
(C) Copyright IBM Japan, Ltd. 2016 All Rights Reserved.
(C) Copyright IBM Corp. 2016 All Rights Reserved.
US Government Users Restricted Rights -
Use, duplication or disclosure restricted
by GSA ADP Schedule Contract with IBM Corp.
 -->
<#assign hasDependent = resource.getRelationDefinitions()?size gt 0>
/** Generated by AWAG ver.${AWAGversion} at ${.now?iso_local} */

package ${resource.packageName}.logic;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import com.ibm.jp.awag.rest.common.logic.ServiceAppException;
import com.ibm.jp.awag.rest.common.logic.ServiceBase;
import com.ibm.jp.awag.rest.common.logic.ServiceDBException;
import com.ibm.jp.awag.rest.common.util.Logger;
import com.ibm.jp.awag.rest.common.util.TextUtility;
import ${resource.packageName}.model.${resource.resourceName};
import ${resource.packageName}.model.${resource.resourceName}PK;
<#if hasDependent>
import ${resource.packageName}.model.${resource.resourceName}_Embed;
</#if>

/**
 * ${resource.resourceName}リソースの業務処理、データアクセスを行うサービス・クラス
 *
 */
@Stateless
<#-- クラス -->
public class ${resource.resourceName}Service extends ServiceBase {

<#-- フィールド -->
	/** ${resource.resourceName}の一覧を取得するSQL */
<#if resource.schemaName??>
	private static final String SELECT_SQL = "select * from ${resource.schemaName}.${resource.tableName}";
<#else>
	private static final String SELECT_SQL = "select * from ${resource.tableName}";
</#if>
<#if hasDependent>

	/** ${resource.resourceName}と関連リソースを取得するJPQL */
	${"\t"}<@compress single_line=true><#t>
	private static final String SELECT_WITHEMBED_JPQL = "SELECT p FROM ${resource.resourceName}_Embed p
	<#list resource.relationDefinitions as relationDefinition>
		LEFT JOIN FETCH p.${relationDefinition.dependentResourceName?uncap_first}<#sep> </#sep>
	</#list>
	WHERE
	<#list resource.pkFields as pkField>
	p.pk.${pkField.fieldName} = :${pkField.fieldName}<#sep> and </#sep>
	</#list>
<#-- 	ORDER BY
	<#list resource.pkFields as pkField>
	p.pk.${pkField.fieldName}<#sep>, </#sep>
	</#list> -->
	";
	</@compress>

</#if>

	/**
	 * デフォルト・コンストラクタ。
	 */
	public ${resource.resourceName}Service() {
		super();
	}

	/**
	 * EntityManagerを指定してインスタンスを初期化する。
	 * @param entityManager EntityManager
	 */
	public ${resource.resourceName}Service(EntityManager entityManager) {
		super(entityManager);
	}

<#if resource.paramFields?has_content>
<#-- GET -->
	/**
	 * Entityのカスタム検索を提供する
	 * @param searchParam
	 * @param isInclusiveOr
	 * @param maxResults
	 * @return
	 */
	public List<${resource.resourceName}> get${resource.resourceName}(${resource.resourceName} searchParam, boolean isInclusiveOr, int maxResults) {

		//CUSTOMIZE 必要な業務処理をここに実装する。

		StringBuilder conditions = new StringBuilder();

		String operator;
		if (isInclusiveOr) {
			operator = " or ";
		} else {
			operator = " and ";
		}

		List<Object> paramList = new ArrayList<Object>();

		<#list resource.paramFields as paramField>
			<#if paramField.version>
		Optional.ofNullable(searchParam.get${paramField.fieldName?cap_first}_db()).ifPresent(value ->
			<#else>
		Optional.ofNullable(searchParam.get${paramField.fieldName?cap_first}()).ifPresent(value ->
			</#if>
		{
			${"\t\t\t"}<@compress single_line=true><#t>
			conditions.append("${paramField.columnName}").append("
			<#if paramField.conditionOperator == "EXACT">
				= ?").append(operator);
			</#if>
			<#if paramField.conditionOperator == "PREFIX">
				 LIKE ? ESCAPE '\\'").append(operator);
			</#if>
			<#if paramField.conditionOperator == "PARTIAL">
				 LIKE ? ESCAPE '\\'").append(operator);
			</#if>
			</@compress>
			<#if paramField.conditionOperator == "EXACT">
				${"\n\t\t\t"}paramList.add(value);
			</#if>
			<#if paramField.conditionOperator == "PREFIX">
				${"\n\t\t\t"}paramList.add(TextUtility.replaceWildcard(value) + "%");
			</#if>
			<#if paramField.conditionOperator == "PARTIAL">
				${"\n\t\t\t"}paramList.add("%" + TextUtility.replaceWildcard(value) + "%");
			</#if>
		});

		</#list>
		StringBuilder sql = new StringBuilder(SELECT_SQL);
		if (conditions.length() != 0) {
			conditions.delete(conditions.lastIndexOf(operator), conditions.length());
			sql.append(" where ( ").append(conditions).append(" )");
		}

		${"\t\t"}<@compress single_line=true><#t>
		sql.append(" ORDER BY
		<#list resource.pkFields as pkField>
		${pkField.columnName}<#sep>, </#sep>
		</#list>
		");
 		</@compress>


		if (maxResults == 0) {
			maxResults = super.getResultMaxNum();
		}
		sql.append(" FETCH FIRST " + maxResults + " ROWS ONLY");

		Logger logger = getLogger();
		logger.info("[SQL] " + sql.toString());

    	Query query = super.getEntityManager().createNativeQuery(sql.toString(), ${resource.resourceName}.class);

    	int idx = 1;
    	for (Object value : paramList) {
    		logger.info("[param] " + value);
    		query.setParameter(idx++, value);
    	}
    	List<${resource.resourceName}> resultList = query.getResultList();

    	if (resultList.isEmpty()) {
    		resultList = null;
    	}
    	return resultList;
	}
</#if>
<#-- GET -->
	/**
	 * 主キーを指定して${resource.resourceName}を取得、必要な業務処理を行う。
	 * @param pk 主キーを格納したPKクラス・オブジェクト
	 * @return ${resource.resourceName}
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	public ${resource.resourceName} getByPK(${resource.resourceName}PK pk) throws ServiceDBException, ServiceAppException {

		//CUSTOMIZE 必要な業務処理をここに実装する。

		return super.getByPK(${resource.resourceName}.class, pk);
	}

<#if hasDependent>
	/**
	 * 主キーを指定して指定した従属リソースを含めて${resource.resourceName}を取得、必要な業務処理を行う。
	 * @param pk 主キーを格納したPKクラス・オブジェクト
	 * @param embeds 同時に取得する従属リソースの名称のリスト
	 * @return ${resource.resourceName}
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	public ${resource.resourceName}_Embed getByPK_Embed(${resource.resourceName}PK pk) throws ServiceDBException, ServiceAppException {

		TypedQuery<${resource.resourceName}_Embed> query = getEntityManager().createQuery(SELECT_WITHEMBED_JPQL, ${resource.resourceName}_Embed.class);

		<#list resource.pkFields as pkField>
		query.setParameter("${pkField.fieldName}", pk.get${pkField.fieldName?cap_first}());
		</#list>

		${resource.resourceName}_Embed ${resource.resourceName?uncap_first}_Embed = null;

		try {
			List<${resource.resourceName}_Embed> resultList = query.getResultList();
			if (resultList != null && !resultList.isEmpty()) {
				${resource.resourceName?uncap_first}_Embed = query.getResultList().get(0);
			}
		} catch (NoResultException e) {
			${resource.resourceName?uncap_first}_Embed =  null;
		}

		return ${resource.resourceName?uncap_first}_Embed;

	}
</#if>

<#-- CREATE -->
	/**
	 * ${resource.resourceName}を登録、必要な業務処理を行う。
	 * @param bean 登録内容を格納したEntityクラス・オブジェクト
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	public void create(${resource.resourceName} bean) throws ServiceDBException, ServiceAppException {

		//CUSTOMIZE 必要な業務処理をここに実装する。

		super.create(bean);
	}

<#-- UPDATE -->
	/**
	 * ${resource.resourceName}を更新、必要な業務処理を行う。
	 * @param bean 更新内容を格納したEntityクラス・オブジェクト
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	public void updateByPK(${resource.resourceName} bean) throws ServiceDBException, ServiceAppException {

		//CUSTOMIZE 必要な業務処理をここに実装する。

		super.updateByPK(bean);
	}

<#if hasDependent>
	/**
	 * ${resource.resourceName}を更新、必要な業務処理を行う。
	 * @param bean 更新内容を格納したEntityクラス・オブジェクト
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	public void updateByPK_Embed(${resource.resourceName}_Embed bean) throws ServiceDBException, ServiceAppException {

		//CUSTOMIZE 必要な業務処理をここに実装する。

		// 主リソースの更新
		${"\t\t"}<@compress single_line=true><#t>
		${resource.resourceName} target = new ${resource.resourceName}(<#t>
<#list resource.columnDefinitions as column><#t>
		<#if column.version>
		bean.get${column.fieldName?cap_first}_json()<#t>
		<#else>
		bean.get${column.fieldName?cap_first}()<#t>
		</#if>
		<#sep>, </#sep><#t>
</#list>
		);</@compress><#t>


		super.updateByPK(target);

		// 従属リソースの更新
<#list resource.relationDefinitions as relationDefinition>
	<#if relationDefinition.relationPattern == "OneToMany">
		super.updateList(bean.get${relationDefinition.dependentResourceName?cap_first}());
	</#if>
</#list>

	}
</#if>

<#-- DELETE -->
	/**
	 * 主キーを指定して${resource.resourceName}を削除、必要な業務処理を行う。
	 * @param pk 主キーを格納したPKクラス・オブジェクト
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	public void deleteByPK(${resource.resourceName}PK pk) throws ServiceDBException, ServiceAppException {

		//CUSTOMIZE 必要な業務処理をここに実装する。

		super.deleteByPK(${resource.resourceName}.class, pk);
	}

	/**
	 * 主キーを指定して${resource.resourceName}を削除、必要な業務処理を行う。
	 * @param pk 主キーを格納したPKクラス・オブジェクト
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	public void deleteByPK(${resource.resourceName} req${resource.resourceName}) throws ServiceDBException, ServiceAppException {

		//CUSTOMIZE 必要な業務処理をここに実装する。

		super.deleteByPK(${resource.resourceName}.class, req${resource.resourceName}.getPk(), req${resource.resourceName}.get_resourceVersion());
	}

<#if hasDependent>
	/**
	 * 主キーを指定して${resource.resourceName}を削除、必要な業務処理を行う。
	 * @param pk 主キーを格納したPKクラス・オブジェクト
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	public void deleteByPK_Embed(${resource.resourceName}_Embed req${resource.resourceName}) throws ServiceDBException, ServiceAppException {

		//CUSTOMIZE 必要な業務処理をここに実装する。

		super.deleteByPK(${resource.resourceName}_Embed.class, req${resource.resourceName}.getPk(), req${resource.resourceName}.get_resourceVersion());
	}
</#if>
}
