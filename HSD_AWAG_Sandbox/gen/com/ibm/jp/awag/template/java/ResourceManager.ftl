<#--
Automated web application generator

Licensed Materials - Property of IBM
"Restricted Materials of IBM"
IPSC : 6949-63S
(C) Copyright IBM Japan, Ltd. 2016 All Rights Reserved.
(C) Copyright IBM Corp. 2016 All Rights Reserved.
US Government Users Restricted Rights -
Use, duplication or disclosure restricted
by GSA ADP Schedule Contract with IBM Corp.
 -->
<#assign hasDependent = resource.getRelationDefinitions()?size gt 0>
/** Generated by AWAG ver.${AWAGversion} at ${.now?iso_local} */

package ${resource.packageName}.resource;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;
import javax.interceptor.Interceptors;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import com.ibm.jp.awag.rest.common.logic.ServiceAppException;
import com.ibm.jp.awag.rest.common.logic.ServiceDBException;
import com.ibm.jp.awag.rest.common.resource.HTTPStatusConstants;
import com.ibm.jp.awag.rest.common.resource.RequestHandler;
import com.ibm.jp.awag.rest.common.resource.ResourceManagerBase;
import com.ibm.jp.awag.rest.common.validator.ValidationException;
import com.ibm.jp.awag.rest.common.validator.group.QueryGroup;
import com.ibm.jp.awag.rest.common.validator.group.DeleteGroup;
import ${resource.packageName}.logic.${resource.resourceName}Service;
import ${resource.packageName}.model.${resource.resourceName};
import ${resource.packageName}.model.${resource.resourceName}PK;
<#if hasDependent>
import ${resource.packageName}.model.${resource.resourceName}_Embed;
</#if>

<#-- クラス -->
/**
 * ${resource.resourceName}リソースのREST I/Fを管理するクラス。
 *
 */
@Path("${resource.resourceName?lower_case}")
public class ${resource.resourceName}ResourceManager extends ResourceManagerBase {

<#-- フィールド -->
	/** ${resource.resourceName}サービス */
	@Inject
	private ${resource.resourceName}Service service;

<#-- GET -->
	/**
	 * 主キーを指定して${resource.resourceName}をGET（取得）する。
<#list resource.columnDefinitions as column>
 <#if column.pk>
	 * @param ${column.fieldName} ${column.displayName}
 </#if>
</#list>
	 * @return 取得結果
	 * @throws ValidationException 入力チェック例外が発生した場合
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
${"\t"}<@compress single_line=true><#t>
	@Path("<#rt>
<#list resource.pkFields as pkField>
	{${pkField.fieldName}}<#sep>.<#t>
</#list>
	")<#t>
</@compress>

	@GET
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Interceptors(RequestHandler.class)
${"\t"}<@compress single_line=true><#t>
	public Response get${resource.resourceName}(<#t>
<#list resource.pkFields as pkField><#t>
@PathParam("${pkField.fieldName}") ${pkField.dataType.javaType} req${pkField.fieldName?cap_first}<#sep>, </#sep><#t>
</#list>
<#if hasDependent>
, @QueryParam("embed") List<String> embeds<#t>
</#if>
) throws ValidationException, ServiceDBException, ServiceAppException {
</@compress>


${"\t\t"}<@compress single_line=true><#t>
		${resource.resourceName}PK pk = new ${resource.resourceName}PK(<#rt>
<#list resource.pkFields as pkField>
	req${pkField.fieldName?cap_first}<#sep>, </#sep><#t>
</#list>);
</@compress>


		// 単項目Validation
		super.validateBean(pk);

<#if hasDependent>
		ResponseBuilder rb = null;

		// データアクセス
		if (embeds == null || embeds.isEmpty() || embeds.contains("false")) {
			${resource.resourceName} ${resource.resourceName?uncap_first} = service.getByPK(pk);
			rb = Optional.ofNullable(${resource.resourceName?uncap_first}).map(s -> Response.ok(s)).orElse(Response.status(HTTPStatusConstants.NO_CONTENT));
		} else {
			if (embeds.contains("true")) {
				${resource.resourceName}_Embed ${resource.resourceName?uncap_first} = service.getByPK_Embed(pk);
				rb = Optional.ofNullable(${resource.resourceName?uncap_first}).map(s -> Response.ok(s)).orElse(Response.status(HTTPStatusConstants.NO_CONTENT));
			} else {
				rb = Response.status(HTTPStatusConstants.BAD_REQUEST);
			}
		}

		// Response生成
		return rb.build();
<#else>
		${resource.resourceName} ${resource.resourceName?uncap_first} = null;

		// データアクセス
		${resource.resourceName?uncap_first} = service.getByPK(pk);

		// Response生成
		ResponseBuilder rb = Optional.ofNullable(${resource.resourceName?uncap_first}).map(s -> Response.ok(s)).orElse(Response.status(HTTPStatusConstants.NO_CONTENT));
		return rb.build();
</#if>
	}

<#-- CRATE -->
	/**
	 * ${resource.resourceName}をPOST（新規登録）する。
	 * @param req${resource.resourceName} 登録内容を格納した${resource.resourceName}オブジェクト
	 * @return 登録結果
	 * @throws ValidationException 入力チェック例外が発生した場合
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	@POST
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Interceptors(RequestHandler.class)
<#if hasDependent>
	public Response create${resource.resourceName}(${resource.resourceName}_Embed req${resource.resourceName}) throws ValidationException, ServiceDBException, ServiceAppException {
<#else>
	public Response create${resource.resourceName}(${resource.resourceName} req${resource.resourceName}) throws ValidationException, ServiceDBException, ServiceAppException {
</#if>
<#if hasDependent>

		// 単項目Validation（親リソース）
		super.validateBean(req${resource.resourceName});

		// 単項目Validation（従属リソース）
	<#list resource.relationDefinitions as relationDefinition>
		super.validateBean(req${resource.resourceName}.get${relationDefinition.dependentResourceName}());
	</#list>
<#else>

		// 単項目Validation
		super.validateBean(req${resource.resourceName});
</#if>

		// データアクセス
		service.create(req${resource.resourceName});

		// Response生成
		ResponseBuilder rb = Response.status(HTTPStatusConstants.CREATED);
		return rb.build();
	}

<#-- UPDATE -->
	/**
	 * 主キーを指定して${resource.resourceName}をPUT（更新）する。
<#list resource.columnDefinitions as column>
 <#if column.pk>
	 * @param req${column.fieldName?cap_first} ${column.displayName}
 </#if>
</#list>
	 * @param req${resource.resourceName} 更新内容を格納した${resource.resourceName}オブジェクト
	 * @return 更新結果
	 * @throws ValidationException 入力チェック例外が発生した場合
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
${"\t"}<@compress single_line=true><#t>
	@Path("<#rt>
<#list resource.pkFields as pkField>
	{${pkField.fieldName}}<#sep>.<#t>
</#list>
	")<#t>
</@compress>

	@PUT
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Interceptors(RequestHandler.class)
${"\t"}<@compress single_line=true><#t>
	public Response update${resource.resourceName}(<#t>
<#list resource.pkFields as pkField><#t>
@PathParam("${pkField.fieldName}") ${pkField.dataType.javaType} req${pkField.fieldName?cap_first}<#sep>, </#sep><#t>
</#list>
<#if hasDependent>
, ${resource.resourceName}_Embed req${resource.resourceName}, @QueryParam("embed") List<String> embeds) 
<#else>
, ${resource.resourceName} req${resource.resourceName}) 
</#if>
throws ValidationException, ServiceDBException, ServiceAppException {
</@compress>


${"\t"}${"\t"}<@compress single_line=true><#t>
		${resource.resourceName}PK pk = new ${resource.resourceName}PK(<#t>
<#list resource.pkFields as pkField><#t>
		req${pkField.fieldName?cap_first}<#sep>, </#sep><#t>
</#list>
		);<#t>
</@compress>

		if (!pk.equals(req${resource.resourceName}.getPk())) {
			return Response.status(HTTPStatusConstants.BAD_REQUEST).build();
		}

<#if hasDependent>
		// 単項目Validation（親リソース）
		super.validateBean(req${resource.resourceName});

		// 単項目Validation（従属リソース）
	<#list resource.relationDefinitions as relationDefinition>
		super.validateBean(req${resource.resourceName}.get${relationDefinition.dependentResourceName}());
	</#list>
<#else>
		// 単項目Validation
		super.validateBean(req${resource.resourceName});
</#if>

<#if hasDependent>
		ResponseBuilder rb = null;

		// データアクセス
		if (embeds == null || embeds.isEmpty() || embeds.contains("false")) {
		${"\t"}${"\t"}${"\t"}<@compress single_line=true><#t>
			${resource.resourceName} ${resource.resourceName?uncap_first} = new ${resource.resourceName}(<#t>
<#list resource.columnDefinitions as column><#t>
			<#if column.version>
			req${resource.resourceName}.get${column.fieldName?cap_first}_json()<#t>
			<#else>
			req${resource.resourceName}.get${column.fieldName?cap_first}()<#t>
			</#if>
			<#sep>, </#sep><#t>
</#list>
			);</@compress><#t>
			
			service.updateByPK(${resource.resourceName?uncap_first});
			rb = Response.status(HTTPStatusConstants.NO_CONTENT);
		} else {
			if (embeds.contains("true")) {
				service.updateByPK_Embed(req${resource.resourceName});
				rb = Response.status(HTTPStatusConstants.NO_CONTENT);
			} else {
				rb = Response.status(HTTPStatusConstants.BAD_REQUEST);
			}
		}

		// Response生成
		return rb.build();
<#else>
		// データアクセス
		service.updateByPK(req${resource.resourceName});

		// Response生成
		ResponseBuilder rb = Response.status(HTTPStatusConstants.NO_CONTENT);
		return rb.build();
</#if>
	}

<#-- DELETE -->
<#--	/**
	 * 主キーを指定して${resource.resourceName}をDELETE（削除）する。
<#list resource.columnDefinitions as column>
 <#if column.pk>
	 * @param req${column.fieldName?cap_first} ${column.displayName}
 </#if>
</#list>
	 * @return 削除結果
	 * @throws ValidationException 入力チェック例外が発生した場合
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
${"\t"}<@compress single_line=true><#t>
	@Path("<#rt>
<#list resource.pkFields as pkField>
	{${pkField.fieldName}}<#sep>.<#t>
</#list>
	")<#t>
</@compress>

	@DELETE
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
${"\t"}<@compress single_line=true><#t>
	public Response delete${resource.resourceName}(<#t>
<#list resource.pkFields as pkField><#t>
@PathParam("${pkField.fieldName}") ${pkField.dataType.javaType} req${pkField.fieldName?cap_first}<#sep>, </#sep><#t>
</#list>
) throws ValidationException, ServiceDBException, ServiceAppException {
</@compress>


${"\t\t"}<@compress single_line=true><#t>
		${resource.resourceName}PK pk = new ${resource.resourceName}PK(
<#list resource.pkFields as pkField>
		req${pkField.fieldName?cap_first}<#sep>,
</#list>
		);
</@compress>


		// 単項目Validation
		super.validateBean(pk);

		// データアクセス
		service.deleteByPK(pk);

		// Response生成
		ResponseBuilder rb = Response.status(HTTPStatusConstants.NO_CONTENT);
		return rb.build();
	}
-->
${"\t"}<@compress single_line=true><#t>
	@Path("<#rt>
<#list resource.pkFields as pkField>
	{${pkField.fieldName}}<#sep>.<#t>
</#list>
	")<#t>
</@compress>

	@DELETE
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Interceptors(RequestHandler.class)
${"\t"}<@compress single_line=true><#t>
	public Response delete${resource.resourceName}(<#t>
<#list resource.pkFields as pkField><#t>
@PathParam("${pkField.fieldName}") ${pkField.dataType.javaType} req${pkField.fieldName?cap_first}<#sep>, </#sep><#t>
</#list>
, @QueryParam("version") String versionString
<#if hasDependent>
, @QueryParam("embed") List<String> embeds
</#if>
) throws ValidationException, ServiceDBException, ServiceAppException {
</@compress>

${"\t"}${"\t"}<@compress single_line=true><#t>
		${resource.resourceName}PK pk = new ${resource.resourceName}PK(<#t>
<#list resource.pkFields as pkField><#t>
		req${pkField.fieldName?cap_first}<#sep>, </#sep><#t>
</#list>
		);<#t>
</@compress>


<#if hasDependent>
		ResponseBuilder rb = null;

		// データアクセス
		if (embeds == null || embeds.isEmpty() || embeds.contains("false")) {
			${resource.resourceName} ${resource.resourceName?uncap_first} = new ${resource.resourceName}();
			${resource.resourceName?uncap_first}.setPk(pk);
			${resource.resourceName?uncap_first}.set_resourceVersionString(versionString);

			// 単項目Validation
			super.validateBean(${resource.resourceName?uncap_first}, DeleteGroup.class);

			service.deleteByPK(${resource.resourceName?uncap_first});
			rb = Response.status(HTTPStatusConstants.NO_CONTENT);
		} else {
			if (embeds.contains("true")) {
				${resource.resourceName}_Embed ${resource.resourceName?uncap_first} = new ${resource.resourceName}_Embed();
				${resource.resourceName?uncap_first}.setPk(pk);
				${resource.resourceName?uncap_first}.set_resourceVersionString(versionString);

				// 単項目Validation
				super.validateBean(${resource.resourceName?uncap_first}, DeleteGroup.class);

				service.deleteByPK_Embed(${resource.resourceName?uncap_first});
				rb = Response.status(HTTPStatusConstants.NO_CONTENT);
			} else {
				rb = Response.status(HTTPStatusConstants.BAD_REQUEST);
			}
		}

		// Response生成
		return rb.build();
<#else>
		${resource.resourceName} ${resource.resourceName?uncap_first} = new ${resource.resourceName}();
		${resource.resourceName?uncap_first}.setPk(pk);
		${resource.resourceName?uncap_first}.set_resourceVersionString(versionString);

		// 単項目Validation
		super.validateBean(${resource.resourceName?uncap_first}, DeleteGroup.class);

		// データアクセス
		service.deleteByPK(${resource.resourceName?uncap_first});

		// Response生成
		ResponseBuilder rb = Response.status(HTTPStatusConstants.NO_CONTENT);
		return rb.build();
</#if>
	}
	
<#-- GET List -->
<#if resource.paramFields?has_content>
	/**
	 * 検索パラメータを使用してSampleをGET（取得）する。
<#list resource.paramFields as paramField>
	 * @param req${paramField.fieldName?cap_first} ${paramField.displayName}
</#list>
	 * @param inclusive 検索パラメータをOR条件で検索する場合true、AND条件で検索する場合false
	 * @param maxResults 取得件数
	 * @return 取得結果
	 * @throws ValidationException 入力チェック例外が発生した場合
	 * @throws ServiceDBException DB例外が発生した場合
	 * @throws ServiceAppException 業務例外が発生した場合
	 */
	@GET
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_XML })
	@Interceptors(RequestHandler.class)
${"\t"}<@compress single_line=true><#t>
	public Response get${resource.resourceName}List(<#t>
<#list resource.paramFields as paramField><#t>
			@QueryParam("${paramField.fieldName}") ${paramField.dataType.javaType} req${paramField.fieldName?cap_first}<#sep>, <#t>
</#list>
			, @QueryParam("inclusiveor") boolean inclusive,
			@QueryParam("maxResults") int maxResults) throws ValidationException, ServiceDBException, ServiceAppException {
</@compress>


		// データアクセス
${"\t\t"}<@compress single_line=true><#t>
		${resource.resourceName} searchParam = new ${resource.resourceName}(
<#list resource.columnDefinitions as column>
	 <#if column.searchParam>
		req${column.fieldName?cap_first}
	 <#else>
	 	null
	 </#if><#sep>,
</#list>
		);
</@compress>


		// 単項目Validation
		super.validateBean(searchParam, QueryGroup.class);

<#if resource.maxResult??>
		if(maxResults < 1 ) {
			maxResults =  ${resource.maxResult?c};
		}
</#if>

		List<${resource.resourceName}> ${resource.resourceName?uncap_first}list = service.get${resource.resourceName}(searchParam, inclusive, maxResults);

		// Response生成
		ResponseBuilder rb = Optional.ofNullable(${resource.resourceName?uncap_first}list).map(s -> Response.ok(s)).orElse(Response.status(HTTPStatusConstants.NO_CONTENT));
		return rb.build();
	}
</#if>
}
