<#--
Automated web application generator

Licensed Materials - Property of IBM
"Restricted Materials of IBM"
IPSC : 6949-63S
(C) Copyright IBM Japan, Ltd. 2016 All Rights Reserved.
(C) Copyright IBM Corp. 2016 All Rights Reserved.
US Government Users Restricted Rights -
Use, duplication or disclosure restricted
by GSA ADP Schedule Contract with IBM Corp.
 -->
<#assign hasDependent = resource.getRelationDefinitions()?size gt 0>
/** Generated by AWAG ver.${AWAGversion} at ${.now?iso_local} **/
"use strict";
var app = angular.module('awag.${resource.resourceName?lower_case}', ['ngRoute', 'ngResource', 'awag.common'])
  /**
   * routing for ${resource.resourceName?lower_case} CRUD
   **/
  .config(['$routeProvider', function($routeProvider) {
    $routeProvider
      .when('/home', {
        controller: 'HomeCtrl as home',
        templateUrl: 'awag/home.html'
      })
      .when('/${resource.resourceName?lower_case}', {
        controller: '${resource.resourceName?cap_first}Ctrl as m',
        templateUrl: 'awag/${resource.resourceName?lower_case}/${resource.resourceName?lower_case}Search.html'
      })
      .when('/${resource.resourceName?lower_case}/entry', {
        controller: '${resource.resourceName?cap_first}Ctrl as m',
        templateUrl: 'awag/${resource.resourceName?lower_case}/${resource.resourceName?lower_case}Entry<#if hasDependent>Items</#if>.html'
      })
<#if hasDependent>
	<#list resource.relationDefinitions as relationDefinition>
      .when('/${resource.resourceName?lower_case}/item/entry', {
        controller: '${resource.resourceName?cap_first}Ctrl as m',
        templateUrl: 'awag/${resource.resourceName?lower_case}/${relationDefinition.dependentResourceName?lower_case}Entry.html'
      })
      .when('/${resource.resourceName?lower_case}/item/confirm', {
        controller: '${resource.resourceName?cap_first}Ctrl as m',
        templateUrl: 'awag/${resource.resourceName?lower_case}/${relationDefinition.dependentResourceName?lower_case}Confirm.html'
      })
	</#list>
</#if>
      .when('/${resource.resourceName?lower_case}/confirm', {
        controller: '${resource.resourceName?cap_first}Ctrl as m',
        templateUrl: 'awag/${resource.resourceName?lower_case}/${resource.resourceName?lower_case}Confirm<#if hasDependent>Items</#if>.html'
      });
  }])
  /**
   * API for ${resource.resourceName?lower_case} CRUD
   **/
  .factory('${resource.resourceName?lower_case}API', ['$resource',
    function($resource) {
      return $resource(contextRoot+'/rest/${resource.resourceName?lower_case}/:id', {
        id: '@id'
      }, {
        create: {
          method: 'POST'
        },
        save: {
          method: 'PUT'
        }
      });
    }
  ]);

/**
 * sample business logic
 **/
app.service('${resource.resourceName?lower_case}Model', ['$log', '$location', '$timeout', '${resource.resourceName?lower_case}API', 'ErrorHandler', 'KEY_DELIMITER', 'ParamObject', 'JsonUtils',
  function($log, $location, $timeout, ${resource.resourceName?lower_case}API, ErrorHandler, KEY_DELIMITER, ParamObject, JsonUtils) {
    /**
     * call search API
     * @param {caller} controller
     **/
    this.search = function(caller) {
      //clear empty params
      var param = JsonUtils.clearEmptyParams(caller.search);
      caller.searchList = ${resource.resourceName?lower_case}API.query(param, function(searchList, responseHeaders) {
        //success
        $log.debug(searchList.length + ' items');
        //setup pager
        for (var i = 0; i < Math.floor((searchList.length - 1) / caller.pager.len) + 1; i++) {
          caller.pager.pagerList[i] = i;
        }
        caller.pager.start = 0;
        //no record
        if (searchList.length == 0) {
          var msg = '条件に合うレコードがありません。 条件を変更して実行してください。';
          caller.error = ErrorHandler.handleError(param, responseHeaders, msg);
        }

        ParamObject.paramSearchList = searchList;
        //loading
        hideLoading();
        $timeout(MKDT, 0, false);
      }, function(httpResponse) {
        caller.error = ErrorHandler.handleError(param, httpResponse);
      });
    };

    /**
     * call select API
     * @param {caller} controller
     **/
    this.get = function(caller) {
      ParamObject.paramItem = ${resource.resourceName?lower_case}API.get({
        id: caller.selectedKey
<#if hasDependent>
        // 1-N
        , embed: "true"
</#if>
      }, function(responseHeaders) {
        //success
        $log.info(ParamObject.paramItem);
        caller.updateDisabled = false;
        caller.deleteDisabled = false;
<#if hasDependent>
	<#list resource.relationDefinitions as relationDefinition>

        // 1-N
        ParamObject.paramItemList = ParamObject.paramItem.${relationDefinition.dependentResourceName?uncap_first};

	</#list>
</#if>
        //loading
        hideLoading();
        $timeout(MKDT, 0, false);
      }, function(httpResponse) {
        caller.error = ErrorHandler.handleError(caller.selectedKey, httpResponse);
      });
    };

    /**
     * call update API
     * @param {caller} controller
     **/
    this.update = function(caller) {
      caller.model.id = <#list resource.pkFields as pkField>caller.model.${pkField.fieldName}<#sep> + KEY_DELIMITER + </#list>;
      var param = JsonUtils.clearEmptyParams(caller.model);
      ${resource.resourceName?lower_case}API.save({
        id: caller.model.id
<#if hasDependent>
        // 1-N
        , embed: "true"
</#if>
      }, param, function(responseHeaders) {
        //success
        ParamObject.message = "更新処理が成功しました。 (" + caller.model.id + ")";
        $location.path('/home');
        ParamObject.paramSearchList = {};
        //loading
        hideLoading();
        $timeout(MKDT, 0, false);
      }, function(httpResponse) {
        ParamObject.error = ErrorHandler.handleError(caller.model, httpResponse);
        $location.path(caller.url + '/entry');
      });
    };

    /**
     * call create API
     * @param {caller} controller
     **/
    this.create = function(caller) {
      // don't set id to model
      var tempId = <#list resource.pkFields as pkField>caller.model.${pkField.fieldName}<#sep> + KEY_DELIMITER + </#list>;
      var param = JsonUtils.clearEmptyParams(caller.model);
      ${resource.resourceName?lower_case}API.create({}, param, function(responseHeaders) {
        //success
        ParamObject.message = "新規作成が成功しました。 (" + tempId + ")";
        $location.path('/home');
        ParamObject.paramSearchList = {};
        //loading
        hideLoading();
        $timeout(MKDT, 0, false);
      }, function(httpResponse) {
        ParamObject.error = ErrorHandler.handleError(caller.model, httpResponse);
        $location.path(caller.url + '/entry');
      });
    };

<#list resource.columnDefinitions as column>
  <#if column.version>
    <#assign version=column.fieldName>
  </#if>
</#list>
    /**
     * call delete API
     * @param {caller} controller
     **/
    this.delete = function(caller) {
      caller.model.id = <#list resource.pkFields as pkField>caller.model.${pkField.fieldName}<#sep> + KEY_DELIMITER + </#list>;
      ${resource.resourceName?lower_case}API.delete({id: caller.model.id, version: caller.model.${version}<#if hasDependent>, embed: true</#if>}, caller.model, function(responseHeaders) {
        //success
        ParamObject.message = "削除処理が成功しました。 (" + caller.model.id + ")";
        $location.path('/home');
        ParamObject.paramSearchList = {};
        //loading
        hideLoading();
        $timeout(MKDT, 0, false);
      }, function(httpResponse) {
        caller.error = ErrorHandler.handleError(caller.model, httpResponse);
      });
    };
  }
]);

/**
 * controller for ${resource.resourceName?lower_case} CRUD
 **/
app.controller('${resource.resourceName?cap_first}Ctrl', ['$scope', '$window', '$resource', '$location', '$timeout', '$log', '$filter', 'ParamObject', '${resource.resourceName?lower_case}Model', 'ErrorHandler', 'KEY_DELIMITER', 'NameValue', 'JsonUtils',
    <#list resource.columnDefinitions as column><#if column.codeListId??>'${column.codeListId}', </#if></#list><#if hasDependent><#list resource.getEmbeddedResourceDefinitions() as ref><#list ref.columnDefinitions as column><#if column.codeListId??>'${column.codeListId}', </#if></#list></#list></#if>
    function($scope, $window, $resource, $location, $timeout, $log, $filter, ParamObject, ${resource.resourceName?lower_case}Model, ErrorHandler, KEY_DELIMITER, NameValue, JsonUtils
    <#list resource.columnDefinitions as column><#if column.codeListId??>, ${column.codeListId}<#sep></#if></#list><#if hasDependent><#list resource.getEmbeddedResourceDefinitions() as ref><#list ref.columnDefinitions as column><#if column.codeListId??>, ${column.codeListId}<#sep></#if></#list></#list></#if> ) {
    this.url = "/${resource.resourceName?lower_case}";
    $window.document.title = "${resource.resourceDisplayName}";
    this.search = {
      inclusiveor: "false"
    };
    this.pager = {
      start: 0,
      len: 10,
      pagerList: [],
      pagenum: 0
    };
    this.error = ParamObject.error;
    ParamObject.error = null;
    //setup select, radio
    this.delimiter = KEY_DELIMITER;
    this.getNameFromValue = NameValue.getName;
<#list resource.columnDefinitions as column>
	<#if column.codeListId??>
    this.${column.codeListId} = ${column.codeListId};
	</#if>
</#list>
    //check mode
    this.mode = ParamObject.mode;
    this.updateDisabled = true;
    this.deleteDisabled = true;
    //set previous page data
    this.model = ParamObject.paramItem;
    //keep search result
    this.searchList = ParamObject.paramSearchList;

    /**
     * goto Update page
     **/
    this.goUpdate = function() {
      ParamObject.mode = "update";
      $location.path(this.url + '/entry');
    };

    /**
     * goto Delete page
     **/
    this.goDelete = function() {
      ParamObject.mode = "delete";
      $location.path(this.url + '/confirm');
    };

    /**
     * goto Create page
     **/
    this.goNew = function() {
      ParamObject.mode = "new";
      ParamObject.paramItem = {};
<#if hasDependent>
      // 1-N
      ParamObject.paramItemList = [];
</#if>
      $location.path(this.url + '/entry');
    };

    /**
     * goto Confirm page
     **/
    this.goConfirm = function() {
<#if hasDependent>
      //1-N
      ParamObject.paramChildItem = null;
</#if>
      ParamObject.paramItem = this.model;
      $location.path(this.url + '/confirm');
    };

    /**
     * search
     **/
    this.doSearch = function() {
      //loading
      showLoading();
      //clear errors in same screan
      this.error = null;
      this.pager.pagerList = [];

      //search logic
      ${resource.resourceName?lower_case}Model.search(this);

      this.updateDisabled = true;
      this.deleteDisabled = true;
      delete ParamObject.paramItem;
      delete this.selectedKey;
    };

    /**
     * select and call GET id API
     **/
    this.select = function() {
      this.updateDisabled = true;
      this.deleteDisabled = true;
      //loading
      showLoading();
      this.error = null;

      $log.debug('selected ' + this.selectedKey);
      ${resource.resourceName?lower_case}Model.get(this);
    };

    /**
     * call update API
     **/
    this.update = function() {
      //loading
      showLoading();
      ${resource.resourceName?lower_case}Model.update(this);
    };

    /**
     * call create API
     **/
    this.create = function() {
      //loading
      showLoading();
      ${resource.resourceName?lower_case}Model.create(this);
    };

    /**
     * call delete API
     **/
    this.delete = function() {
      //loading
      showLoading();
      ${resource.resourceName?lower_case}Model.delete(this);
    };

    /**
     * pagenation
     * @param {page} page number (0-)
     **/
    this.paginate = function(pager, page){
      pager.start = pager.len * page;
      pager.pagenum = page;
      $timeout(MKDT, 0, false);
    };

    /**
     * sort
     * @param {key} sort key
     * @param {isDesc} true/false
     **/
    this.sort = function(key, isDesc){
      this.searchList = $filter('orderBy')(this.searchList, key, isDesc);
      $timeout(MKDT, 0, false);
    };

    /**
     * reset table sort flags
     * @param {target} exception
     **/
    this.resetDesc = function(target){
<#list resource.columnDefinitions as column>
	<#if column.searchParam>
      if(target!='${column.fieldName}')delete this.${column.fieldName}Desc;
	</#if>
</#list>
    };

    /**
     * reset input
     **/
    this.reset = function(){
      this.search = {
        inclusiveor: "false"
      };
      $timeout(MKDT, 0, false);
      $timeout(RSCKD, 0, false);
    };

    //for material design light
    $timeout(MKDT, 0, false);

<#if hasDependent>
  <#assign tmp>
    <#list resource.getEmbeddedResourceDefinitions() as ref>
      <#list ref.pkFields as embedPkField>
        <#list resource.pkFields as pkField>
          <#if embedPkField.fieldName == pkField.fieldName>
            <#break>
          </#if>
        ${embedPkField.fieldName}
        </#list>
      </#list>
    </#list>
  </#assign>
  <#assign embedKeys = tmp?word_list>
  <#assign embeddedResource = embeddedResourceDefinitions[0]>
////for 1-N pattern//
    //child item select, radio
  <#list embeddedResource.columnDefinitions as column>
    <#if column.codeListId??>
    this.${column.codeListId} = ${column.codeListId};
    </#if>
  </#list>

    if(ParamObject.paramChildItem != null){
      this.model.child = ParamObject.paramChildItem;
      ParamObject.paramChildItem = null;
    }
    this.itemPager = {start :0, len :5, pagerList : [], pagenum: 0};
    this.itemList = ParamObject.paramItemList;
    if(this.itemList != null){
      //setup child pager
      for (var i = 0; i < Math.floor((this.itemList.length - 1) / this.itemPager.len) + 1; i++) {
        this.itemPager.pagerList[i] = i;
      }
      this.itemPager.start=0;
    }
    this.updateItemDisabled = true;
    this.deleteItemDisabled = true;
    this.confirmItemDisabled = true;

    /**
     * goto create child item page
     **/
    this.goNewItem = function() {
      ParamObject.itemMode = "new";

      // TODO set default value if needed
      // this is a sample that sets the biggest value + 1 as next item key
      ParamObject.paramChildItem = {_action: "a"};
  <#list resource.getRelationDefinitions() as ref>
    <#list ref.getJoinKeyList() as key>
      <#list resource.columnDefinitions as column>
        <#if key.keyParent==column.columnName>
          <#assign keyParent = column.fieldName>
        </#if>
      </#list>
      <#list embeddedResource.columnDefinitions as column>
        <#if key.keyDependence==column.columnName>
          <#assign keyDependence = column.fieldName>
        </#if>
      </#list>
      ParamObject.paramChildItem.${keyDependence} = this.model.${keyParent};
    </#list>
  </#list>
      var max = 0;
      for(var i=0;i<ParamObject.paramItemList.length;i++){
        if(ParamObject.paramItemList[i].${embedKeys?first} > max){
          max = ParamObject.paramItemList[i].${embedKeys?first};
        }
      }
      ParamObject.paramChildItem.${embedKeys?first} = Number(max) + 1;

      $location.path(this.url + '/item/entry');
    };

    /**
     * select and call GET id API
     **/
    this.itemSelect = function() {
      //loading
      showLoading();
      $log.info("selected item "+this.itemKey);
      this.error = null;
      this.updateItemDisabled = false;
      this.deleteItemDisabled = false;
      for(var i=0;i<ParamObject.paramItemList.length;i++){
        var keys = <#list embeddedResource.pkFields as pkField>ParamObject.paramItemList[i].${pkField.fieldName}<#sep>+this.delimiter+</#list>;
        if(keys == this.itemKey){
          ParamObject.paramChildItem = ParamObject.paramItemList[i];
          break;
        }
      }

      this.confirmItemDisabled = false;
      hideLoading();

    };

    /**
     * goto update child item page
     **/
    this.goItemUpdate = function() {
      ParamObject.itemMode = "update";
      $location.path(this.url + '/item/entry');
    };

    /**
     * add child and goto entry page
     **/
    this.addItem = function() {
      if(ParamObject.itemMode == "update"){
        for(var i=0;i<ParamObject.paramItemList.length;i++){
          var keys = <#list embeddedResource.pkFields as pkField>ParamObject.paramItemList[i].${pkField.fieldName}<#sep>+this.delimiter+</#list>;
          var modelKeys = <#list embeddedResource.pkFields as pkField>this.model.child.${pkField.fieldName}<#sep>+this.delimiter+</#list>;
          if(keys == modelKeys){
            this.model.child._action = "u";
            ParamObject.paramItemList[i] = this.model.child;
            break;
          }
        }
      } else if (ParamObject.itemMode == "new"){
        this.model.child._action = "a";
        ParamObject.paramItemList[ParamObject.paramItemList.length] = this.model.child;
        ParamObject.paramItem.${embeddedResource.resourceName?uncap_first} = ParamObject.paramItemList;
      }

      // TODO update parent model such as order if needed

      $location.path(this.url + '/entry');
    };

    /**
     * goto child item
     **/
    this.doItemDelete = function() {
      if(ParamObject.mode == "new"){
        var tmp = [];
        for(var i=0; i < ParamObject.paramItemList.length; i++){
          var keys = <#list embeddedResource.pkFields as pkField>ParamObject.paramItemList[i].${pkField.fieldName}<#sep>+this.delimiter+</#list>;
          if(keys != this.itemKey){
            tmp.push(ParamObject.paramItemList[i]);
          }
        }
        ParamObject.paramItemList = tmp;
        this.itemList = ParamObject.paramItemList;
      } else {
        for(var i=0; i < ParamObject.paramItemList.length; i++){
          var keys = <#list embeddedResource.pkFields as pkField>ParamObject.paramItemList[i].${pkField.fieldName}<#sep>+this.delimiter+</#list>;
          if(keys == this.itemKey){
            ParamObject.paramItemList[i]._action='d';
          }
        }
      }
    };

    /**
     * goto update child item page
     **/
    this.goItemConfirm = function() {
      $location.path(this.url + '/item/confirm');
    };

    /**
     * sort for item list
     * @param {key} sort key
     * @param {isDesc} true/false
     **/
    this.isort = function(key, isDesc){
      this.itemList = $filter('orderBy')(this.itemList, key, isDesc);
    };

    /**
     * reset table sort flags for item list
     * @param {target} exception
     **/
    this.iresetDesc = function(target){
  <#list resource.getEmbeddedResourceDefinitions() as emb>
    <#list emb.columnDefinitions as column>
      <#if column.searchParam>
      if(target!='${column.fieldName}')delete this.i.${column.fieldName}Desc;
      </#if>
    </#list>
  </#list>

    };

////for 1-N pattern
</#if>
  }
]);
