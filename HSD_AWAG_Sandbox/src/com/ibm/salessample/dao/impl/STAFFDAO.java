/** Generated by AWAG ver.2.0.0.GIT-e0917bf.BUILD-20170421-1451+0900 */

package com.ibm.salessample.dao.impl;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.interceptor.Interceptors;
import javax.enterprise.context.Dependent;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaDelete;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import com.ibm.jp.awag2.common.dao.DAOBase;
import com.ibm.jp.awag2.common.dao.DAOParameter;
import com.ibm.jp.awag2.common.entity.JoinEntity;
import com.ibm.jp.awag2.common.logic.ServiceAppException;
import com.ibm.jp.awag2.common.logic.ServiceDBException;
import com.ibm.jp.awag2.common.dao.DAOIF;
import com.ibm.jp.awag2.common.util.MethodTraceLoggingInterceptor;
import com.ibm.salessample.entity.STAFF;
import com.ibm.salessample.entity.STAFFPK;

/**
 * 社員（STAFF）EntityのDAOクラス。
 *
 */
 @Interceptors(MethodTraceLoggingInterceptor.class)
 @Dependent
public class STAFFDAO extends DAOBase<STAFF, STAFFPK, Timestamp> implements DAOIF<STAFF, STAFFPK> {

	/** デフォルト最大取得件数 */
	private static int DEFAULT_MAX_RESULT = 0;

	@Override
	public Optional<STAFF> find(STAFFPK pk)  throws ServiceDBException, ServiceAppException {

		return super.findEntity(STAFF.class, pk);

	}

	@Override
	public Optional<STAFF> find(STAFFPK pk, List<JoinEntity> joinEntityList)  throws ServiceDBException, ServiceAppException {

		EntityManager em = super.getEntityManager();

		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<STAFF> cQuery = cb.createQuery(STAFF.class);

		// FROM
		Root<STAFF> staff = cQuery.from(STAFF.class);

		// JOIN
		if (joinEntityList != null) {
			for (JoinEntity joinEntry :  joinEntityList) {
				recursiveJoin(staff, null, joinEntry);
			}
		}

		// WHERE
		List<Predicate> preds = new ArrayList<>();

		if (pk.getEMPLOYEENO() != null) {
		    preds.add(cb.equal(staff.get("pk").get("EMPLOYEENO"), pk.getEMPLOYEENO()));
		}
		cQuery.where(cb.and(preds.toArray(new Predicate[]{})));

	    TypedQuery<STAFF> tQuery = em.createQuery(cQuery);

		try {
			List<STAFF> staffList = tQuery.getResultList();
			if (staffList == null || staffList.isEmpty()) {
				return Optional.ofNullable(null);
			} else {
				return Optional.ofNullable(tQuery.getResultList().get(0));
			}

		} catch (PersistenceException e) {
			throw createServiceDBException(ServiceDBException.DBErrorType.OTHER, "_EDB00001", e);
		} catch (RuntimeException e) {
			throw createServiceDBException(ServiceDBException.DBErrorType.OTHER, "_EDB00001", e);
		}
	}

	@Override
	public  List<STAFF> findList(DAOParameter param, List<JoinEntity> joinEntityList, boolean isInclusiveOr, Integer maxResults)  throws ServiceDBException, ServiceAppException {

		EntityManager em = super.getEntityManager();

		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<STAFF> cQuery = cb.createQuery(STAFF.class);

		// FROM
		Root<STAFF> staff = cQuery.from(STAFF.class);

		// JOIN
		if (joinEntityList != null) {
			for (JoinEntity joinEntry :  joinEntityList) {
				recursiveJoin(staff, null, joinEntry);
			}
		}

		// WHERE
		List<Predicate> preds = new ArrayList<>();

		if (param.get("employeeno") != null) {
		    preds.add(createPredicate(cb, staff.get("pk").get("EMPLOYEENO"), param.get("employeeno")));
		}

		if (param.get("deptcd") != null) {
		    preds.add(createPredicate(cb, staff.get("DEPTCD"), param.get("deptcd")));
		}

		if (param.get("name") != null) {
		    preds.add(createPredicate(cb, staff.get("NAME"), param.get("name")));
		}

		if (param.get("nameen") != null) {
		    preds.add(createPredicate(cb, staff.get("NAMEEN"), param.get("nameen")));
		}

		if (param.get("tel") != null) {
		    preds.add(createPredicate(cb, staff.get("TEL"), param.get("tel")));
		}

		if (param.get("version") != null) {
		    preds.add(createPredicate(cb, staff.get("VERSION"), param.get("version")));
		}
		if (!preds.isEmpty()) {
			if (isInclusiveOr) {
				cQuery.where(cb.or(preds.toArray(new Predicate[]{})));
			} else {
				cQuery.where(cb.and(preds.toArray(new Predicate[]{})));
			}
		}

	    // ORDER BY
	    cQuery.orderBy(
		cb.asc(staff.get("pk").get("EMPLOYEENO"))
		);

	    TypedQuery<STAFF> tQuery = em.createQuery(cQuery);
	    if (maxResults != null && maxResults > 0) {
		    tQuery.setMaxResults(maxResults);
	    } else {
		    tQuery.setMaxResults(DEFAULT_MAX_RESULT);
	    }

		try {
			List<STAFF> resultList = tQuery.getResultList();
			if (resultList == null) {
				return new ArrayList<STAFF>();
			} else {
				return resultList;
			}
		} catch (PersistenceException e) {
			throw createServiceDBException(ServiceDBException.DBErrorType.OTHER, "_EDB00001", e);
		} catch (RuntimeException e) {
			throw createServiceDBException(ServiceDBException.DBErrorType.OTHER, "_EDB00001", e);
		}
	}

	@Override
	public void insert(STAFF entity) throws ServiceDBException, ServiceAppException {

		super.persistEntity(entity);

	}

	@Override
	public void insertList(List<STAFF> entityList) throws ServiceDBException, ServiceAppException {

		super.persistList(entityList);

	}

	@Override
	public void update(STAFF entity) throws ServiceDBException, ServiceAppException {

		super.mergeEntity(entity);

	}

	@Override
	public void updateList(List<STAFF> entityList) throws ServiceDBException, ServiceAppException {

		super.mergeList(entityList);

	}

	@Override
	public void delete(STAFF entity) throws ServiceDBException, ServiceAppException {

		super.removeEntity(STAFF.class, entity.getPk(), entity.get_resourceVersion());

	}

	@Override
	public void deleteList(List<STAFF> entityList) throws ServiceDBException, ServiceAppException {

		super.removeList(entityList);

	}

}
