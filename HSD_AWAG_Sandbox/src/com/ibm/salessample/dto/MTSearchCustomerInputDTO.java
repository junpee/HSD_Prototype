/** Generated by AWAG ver.2.0.0.GIT-e0917bf.BUILD-20170421-1451+0900 */

package com.ibm.salessample.dto;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import com.ibm.jp.awag2.common.entity.DisplayName;
import com.ibm.jp.awag2.common.validator.DateTime;
import com.ibm.jp.awag2.common.validator.Number;
import com.ibm.jp.awag2.common.validator.StringFormat;
import com.ibm.jp.awag2.common.dto.DTOBase;

/**
 * MTSearchCustomerのInput DTOクラス。
 *
 */
public class MTSearchCustomerInputDTO  extends DTOBase {

	/** お客様番号(customerid) */
	@QueryParam(value = "customerid")
	@StringFormat(type = StringFormat.Type.HALF_NUM, minLength = 8, maxLength = 8)			
	@DisplayName(name = "お客様番号")
	private String customerid;

	/** お客様名（英字）(nameen) */
	@QueryParam(value = "nameen")
	@StringFormat(type = StringFormat.Type.HALF_CHAR, minLength = 2, maxLength = 30)			
	@DisplayName(name = "お客様名（英字）")
	private String nameen;

	/** お客様名（全角）(name) */
	@QueryParam(value = "name")
	@StringFormat(type = StringFormat.Type.FULL_CHAR, minLength = 2, maxLength = 10)			
	@DisplayName(name = "お客様名（全角）")
	private String name;

	/** 担当ID(inchargeid) */
	@QueryParam(value = "inchargeid")
	@StringFormat(type = StringFormat.Type.HALF_NUM_CHAR, minLength = 8, maxLength = 8)			
	@DisplayName(name = "担当ID")
	private String inchargeid;

	/** 登録日(registereddate) */
	@QueryParam(value = "registereddate")
	@DateTime(type=DateTime.Type.DATE)			
	@DisplayName(name = "登録日")
	private String registereddate;

	/** お客様名（かな）(hiragana) */
	@QueryParam(value = "hiragana")
	@StringFormat(type = StringFormat.Type.FULL_HIRAGANA, maxLength = 10)			
	@DisplayName(name = "お客様名（かな）")
	private String hiragana;

	/** お客様名（カナ）(katakana) */
	@QueryParam(value = "katakana")
	@StringFormat(type = StringFormat.Type.FULL_KATAKANA, maxLength = 10)			
	@DisplayName(name = "お客様名（カナ）")
	private String katakana;

	/** 概要(description) */
	@QueryParam(value = "description")
	@StringFormat(type = StringFormat.Type.ALL, maxLength = 30)			
	@DisplayName(name = "概要")
	private String description;

	/** お客様ランク(rank) */
	@QueryParam(value = "rank")
	@StringFormat(type = StringFormat.Type.HALF_NUM_CHAR, maxLength = 3)			
	@DisplayName(name = "お客様ランク")
	private String rank;

	/** お客様区分1(custclass1) */
	@QueryParam(value = "custclass1")
	@StringFormat(type = StringFormat.Type.HALF_NUM_CHAR, maxLength = 3)			
	@DisplayName(name = "お客様区分1")
	private String custclass1;

	/** 顧客承認フラグ(checkbox) */
	@QueryParam(value = "checkbox")
	@StringFormat(type = StringFormat.Type.HALF_NUM_CHAR, maxLength = 3)			
	@DisplayName(name = "顧客承認フラグ")
	private String checkbox;
	
	/** OR/AND検索条件(inclusiveOr) */
	@QueryParam(value = "_inclusiveor")
	private boolean inclusiveOr ;
	
	/** 最大取得件数(maxResults) */
	@QueryParam(value = "_maxResults")
	private Integer maxResults;

	/**
	 * お客様番号を取得する。
	 * @return customerid
	 */
	public String getCustomerid() {
		return customerid;
	}

	/**
	 * お客様番号を設定する。
	 * @param customerid
	 */
	public void setCustomerid(String customerid) {
		this.customerid = customerid;
	}

	/**
	 * お客様名（英字）を取得する。
	 * @return nameen
	 */
	public String getNameen() {
		return nameen;
	}

	/**
	 * お客様名（英字）を設定する。
	 * @param nameen
	 */
	public void setNameen(String nameen) {
		this.nameen = nameen;
	}

	/**
	 * お客様名（全角）を取得する。
	 * @return name
	 */
	public String getName() {
		return name;
	}

	/**
	 * お客様名（全角）を設定する。
	 * @param name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * 担当IDを取得する。
	 * @return inchargeid
	 */
	public String getInchargeid() {
		return inchargeid;
	}

	/**
	 * 担当IDを設定する。
	 * @param inchargeid
	 */
	public void setInchargeid(String inchargeid) {
		this.inchargeid = inchargeid;
	}

	/**
	 * 登録日を取得する。
	 * @return registereddate
	 */
	public String getRegistereddate() {
		return registereddate;
	}

	/**
	 * 登録日を設定する。
	 * @param registereddate
	 */
	public void setRegistereddate(String registereddate) {
		this.registereddate = registereddate;
	}

	/**
	 * お客様名（かな）を取得する。
	 * @return hiragana
	 */
	public String getHiragana() {
		return hiragana;
	}

	/**
	 * お客様名（かな）を設定する。
	 * @param hiragana
	 */
	public void setHiragana(String hiragana) {
		this.hiragana = hiragana;
	}

	/**
	 * お客様名（カナ）を取得する。
	 * @return katakana
	 */
	public String getKatakana() {
		return katakana;
	}

	/**
	 * お客様名（カナ）を設定する。
	 * @param katakana
	 */
	public void setKatakana(String katakana) {
		this.katakana = katakana;
	}

	/**
	 * 概要を取得する。
	 * @return description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * 概要を設定する。
	 * @param description
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * お客様ランクを取得する。
	 * @return rank
	 */
	public String getRank() {
		return rank;
	}

	/**
	 * お客様ランクを設定する。
	 * @param rank
	 */
	public void setRank(String rank) {
		this.rank = rank;
	}

	/**
	 * お客様区分1を取得する。
	 * @return custclass1
	 */
	public String getCustclass1() {
		return custclass1;
	}

	/**
	 * お客様区分1を設定する。
	 * @param custclass1
	 */
	public void setCustclass1(String custclass1) {
		this.custclass1 = custclass1;
	}

	/**
	 * 顧客承認フラグを取得する。
	 * @return checkbox
	 */
	public String getCheckbox() {
		return checkbox;
	}

	/**
	 * 顧客承認フラグを設定する。
	 * @param checkbox
	 */
	public void setCheckbox(String checkbox) {
		this.checkbox = checkbox;
	}
	
	/**
	 * OR/AND検索条件を設定する。
	 * @param inclusiveOr OR/AND検索条件
	 */
	public void setInclusiveOr(boolean inclusiveOr) {
		this.inclusiveOr = inclusiveOr;
	}
	
	/**
	 * OR/AND検索条件を取得する。
	 * @return OR/AND検索条件
	 */
	public boolean isInclusiveOr() {
		return this.inclusiveOr;
	}

	/**
	 * 最大取得件数を設定する。
	 * @param maxResults 最大取得件数
	 */
	public void setMaxResults(Integer maxResults) {
		this.maxResults = maxResults;
	}
	
	/**
	 * 最大取得件数を取得する。
	 * @return 最大取得件数
	 */
	public Integer getMaxResults() {
		return this.maxResults;
	}
}