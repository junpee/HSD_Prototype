/** Generated by AWAG ver.2.0.0.GIT-e0917bf.BUILD-20170421-1451+0900 */

package com.ibm.salessample.logic.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.ejb.Stateless;
import javax.inject.Inject;

import com.ibm.jp.awag2.common.dao.DAOBase.SelectWhereOperator;
import com.ibm.jp.awag2.common.dao.DAOParameter;
import com.ibm.jp.awag2.common.entity.JoinEntity;
import com.ibm.jp.awag2.common.logic.ServiceAppException;
import com.ibm.jp.awag2.common.logic.ServiceBase;
import com.ibm.jp.awag2.common.logic.ServiceDBException;
import com.ibm.salessample.dto.GetContactInputDTO;
import com.ibm.salessample.dto.GetContactOutputDTO;
import com.ibm.salessample.dao.impl.CONTACTCustomizeDAO;
import com.ibm.salessample.entity.CONTACT;
import com.ibm.salessample.entity.CONTACTPK;

/**
* コンタクト履歴取得 サービスクラス（GetContact）
* コンタクト履歴取得
*/ 
@Stateless
public class GetContactService extends ServiceBase {

	/** RESULTマップのキー（CONTACT） */
	protected static final String RESULT_MAP_KEY_CONTACT = "contact";

	/** DAOパラメーターマップのキー（CONTACT） */
	protected static final String DAO_PARAM_MAP_KEY_CONTACT = "contact";

	/** DAOパラメーターマップのキー（CONTACTのPK） */
	protected static final String DAO_PARAM_MAP_KEY_CONTACT_PK = "contactPk";

	/** DAOパラメーターマップのキー（CONTACTのJoinList） */
	protected static final String DAO_PARAM_MAP_KEY_CONTACT_JOIN = "joinEntityListForCONTACT";

	/** CONTACTテーブルDAO */
	@Inject
	protected CONTACTCustomizeDAO contactDao;
	
	/**
	 * DBアクセス前の入力データ処理を行う。主にInputDTOからDAOParameterへの詰替処理を行う。
	 * @param GetContactInputDTO InputDTO
	 * @return persistメソッドへの持ち回りデータを格納したMapオブジェクト
	 * @throws ServiceDBException
	 * @throws ServiceAppException
	 */
	protected Map<String, Object> processInput(GetContactInputDTO getcontactinputdto)  throws ServiceDBException, ServiceAppException {
																		
		Map<String, Object> daoParameterMap = new HashMap<>();

		// InputDTOからPKへの詰替		
		CONTACTPK contactPk = new CONTACTPK();

		contactPk.setCUSTOMERID(getcontactinputdto.getCustomerid());
		contactPk.setCONTACTID(getcontactinputdto.getContactid());
		
		daoParameterMap.put(DAO_PARAM_MAP_KEY_CONTACT_PK, contactPk);		

		// Join対象Entity設定

		return daoParameterMap;
	}
	
	/**
	 * DBアクセス処理を行う。
	 * @param daoParameterMap processInputメソッドからの持ち回りデータを格納したMapオブジェクト
	 * @return processOutputメソッドへの持ち回りデータを格納したMapオブジェクト
	 * @throws ServiceDBException
	 * @throws ServiceAppException
	 */
	 	protected Map<String, Object> persist(Map<String, Object> daoParameterMap)  throws ServiceDBException, ServiceAppException  {
		
		// DAOパラメータの取得
		CONTACTPK contactPk = (CONTACTPK) daoParameterMap.get(DAO_PARAM_MAP_KEY_CONTACT_PK);

		// Join対象Entityの取得

		// DAO呼び出し
		Map<String, Object> resultMap = new HashMap<>();

		Optional<CONTACT> contact = contactDao.find(contactPk, null);
		contact.ifPresent(value -> resultMap.put(RESULT_MAP_KEY_CONTACT, contact.get()));
		
		return resultMap;
	}
	
	/**
	 * DBアクセス後の出力データ処理を行う。主にDBアクセス結果からOutputDTOへの詰替処理を行う。
	 * @param resultMap persistメソッドからの持ち回りデータを格納したMapオブジェクト
	 * @return OutputDTO
	 * @throws ServiceDBException
	 * @throws ServiceAppException
	 */
	 	protected GetContactOutputDTO processOutput(Map<String, Object> resultMap)  throws ServiceDBException, ServiceAppException {

		if (resultMap.isEmpty()) {
			return null;
		}
		
		// DAO実行結果の取得
		CONTACT contact = (CONTACT) resultMap.get(RESULT_MAP_KEY_CONTACT);
				
		// DAO実行結果からOutputDTOへの詰替

		GetContactOutputDTO getcontactoutputdtoTmp = new GetContactOutputDTO();
		if (contact != null) getcontactoutputdtoTmp.setCustomerid(contact.getCUSTOMERID());
		if (contact != null) getcontactoutputdtoTmp.setContactid(contact.getCONTACTID());
		if (contact != null) getcontactoutputdtoTmp.setInchargeid(contact.getINCHARGEID());
		if (contact != null) getcontactoutputdtoTmp.setDescription(contact.getDESCRIPTION());
		if (contact != null) getcontactoutputdtoTmp.setSalescd(contact.getSALESCD());
		if (contact != null) getcontactoutputdtoTmp.setOzz(contact.getOZZ());
		if (contact != null) getcontactoutputdtoTmp.setTime(contact.getTIME());

		return getcontactoutputdtoTmp;
	}}