/** Generated by AWAG ver.2.0.0.GIT-e0917bf.BUILD-20170421-1451+0900 */

package com.ibm.salessample.logic.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.ejb.Stateless;
import javax.inject.Inject;

import com.ibm.jp.awag2.common.dao.DAOBase.SelectWhereOperator;
import com.ibm.jp.awag2.common.dao.DAOParameter;
import com.ibm.jp.awag2.common.entity.JoinEntity;
import com.ibm.jp.awag2.common.logic.ServiceAppException;
import com.ibm.jp.awag2.common.logic.ServiceBase;
import com.ibm.jp.awag2.common.logic.ServiceDBException;
import com.ibm.salessample.dto.GetContactListInputDTO;
import com.ibm.salessample.dto.GetContactListOutputDTO;
import com.ibm.salessample.dto.GetContactListOutputDTOStaff;
import com.ibm.salessample.dto.GetContactListOutputDTOContacts;
import com.ibm.salessample.dao.impl.CUSTOMERCustomizeDAO;
import com.ibm.salessample.entity.CUSTOMER;
import com.ibm.salessample.entity.CUSTOMERPK;
import com.ibm.salessample.dao.impl.STAFFCustomizeDAO;
import com.ibm.salessample.entity.STAFF;
import com.ibm.salessample.entity.STAFFPK;
import com.ibm.salessample.dao.impl.CONTACTCustomizeDAO;
import com.ibm.salessample.entity.CONTACT;
import com.ibm.salessample.entity.CONTACTPK;
import com.ibm.salessample.dto.GetContactListOutputDTOContacts;

/**
* コンタクト履歴一覧取得 サービスクラス（GetContactList）
* コンタクト履歴一覧取得
*/ 
@Stateless
public class GetContactListService extends ServiceBase {

	/** RESULTマップのキー（CUSTOMER） */
	protected static final String RESULT_MAP_KEY_CUSTOMER = "customer";

	/** DAOパラメーターマップのキー（CUSTOMER） */
	protected static final String DAO_PARAM_MAP_KEY_CUSTOMER = "customer";

	/** DAOパラメーターマップのキー（CUSTOMERのPK） */
	protected static final String DAO_PARAM_MAP_KEY_CUSTOMER_PK = "customerPk";

	/** DAOパラメーターマップのキー（CUSTOMERのJoinList） */
	protected static final String DAO_PARAM_MAP_KEY_CUSTOMER_JOIN = "joinEntityListForCUSTOMER";

	/** CUSTOMERテーブルDAO */
	@Inject
	protected CUSTOMERCustomizeDAO customerDao;
	
	/**
	 * DBアクセス前の入力データ処理を行う。主にInputDTOからDAOParameterへの詰替処理を行う。
	 * @param GetContactListInputDTO InputDTO
	 * @return persistメソッドへの持ち回りデータを格納したMapオブジェクト
	 * @throws ServiceDBException
	 * @throws ServiceAppException
	 */
	protected Map<String, Object> processInput(GetContactListInputDTO getcontactlistinputdto)  throws ServiceDBException, ServiceAppException {
																		
		Map<String, Object> daoParameterMap = new HashMap<>();

		// InputDTOからPKへの詰替		
		CUSTOMERPK customerPk = new CUSTOMERPK();

		customerPk.setCUSTOMERID(getcontactlistinputdto.getCustomerid());
		
		daoParameterMap.put(DAO_PARAM_MAP_KEY_CUSTOMER_PK, customerPk);		

		// Join対象Entity設定
		List<JoinEntity> joinEntityListForCUSTOMER = new ArrayList<>();
		JoinEntity joinEntityForSTAFF = new JoinEntity("STAFF");
		joinEntityListForCUSTOMER.add(joinEntityForSTAFF);
		JoinEntity joinEntityForCONTACT = new JoinEntity("CONTACT");
		joinEntityListForCUSTOMER.add(joinEntityForCONTACT);
		daoParameterMap.put(DAO_PARAM_MAP_KEY_CUSTOMER_JOIN, joinEntityListForCUSTOMER);

		return daoParameterMap;
	}
	
	/**
	 * DBアクセス処理を行う。
	 * @param daoParameterMap processInputメソッドからの持ち回りデータを格納したMapオブジェクト
	 * @return processOutputメソッドへの持ち回りデータを格納したMapオブジェクト
	 * @throws ServiceDBException
	 * @throws ServiceAppException
	 */
	 	protected Map<String, Object> persist(Map<String, Object> daoParameterMap)  throws ServiceDBException, ServiceAppException  {
		
		// DAOパラメータの取得
		CUSTOMERPK customerPk = (CUSTOMERPK) daoParameterMap.get(DAO_PARAM_MAP_KEY_CUSTOMER_PK);

		// Join対象Entityの取得
		List<JoinEntity> joinEntityListForCUSTOMER = (List<JoinEntity>) daoParameterMap.get(DAO_PARAM_MAP_KEY_CUSTOMER_JOIN);

		// DAO呼び出し
		Map<String, Object> resultMap = new HashMap<>();

		Optional<CUSTOMER> customer = customerDao.find(customerPk, joinEntityListForCUSTOMER);
		customer.ifPresent(value -> resultMap.put(RESULT_MAP_KEY_CUSTOMER, customer.get()));
		
		return resultMap;
	}
	
	/**
	 * DBアクセス後の出力データ処理を行う。主にDBアクセス結果からOutputDTOへの詰替処理を行う。
	 * @param resultMap persistメソッドからの持ち回りデータを格納したMapオブジェクト
	 * @return OutputDTO
	 * @throws ServiceDBException
	 * @throws ServiceAppException
	 */
	 	protected GetContactListOutputDTO processOutput(Map<String, Object> resultMap)  throws ServiceDBException, ServiceAppException {

		if (resultMap.isEmpty()) {
			return null;
		}
		
		// DAO実行結果の取得
		CUSTOMER customer = (CUSTOMER) resultMap.get(RESULT_MAP_KEY_CUSTOMER);
				
		// DAO実行結果からOutputDTOへの詰替

		GetContactListOutputDTO getcontactlistoutputdtoTmp = new GetContactListOutputDTO();
		if (customer != null) getcontactlistoutputdtoTmp.setCustomerid(customer.getCUSTOMERID());
		if (customer != null) getcontactlistoutputdtoTmp.setNameen(customer.getNAMEEN());
		if (customer != null) getcontactlistoutputdtoTmp.setName(customer.getNAME());

		GetContactListOutputDTOStaff getcontactlistoutputdtostaffTmpWrap = null;
		if (customer != null && customer.getSTAFF() != null) getcontactlistoutputdtostaffTmpWrap = new GetContactListOutputDTOStaff();
		STAFF staff = null;
		if (customer != null && customer.getSTAFF() != null) staff = customer.getSTAFF();
			if (staff != null) getcontactlistoutputdtostaffTmpWrap.setEmployeeno(staff.getEMPLOYEENO());
			if (staff != null) getcontactlistoutputdtostaffTmpWrap.setName(staff.getNAME());
		getcontactlistoutputdtoTmp.setStaff(getcontactlistoutputdtostaffTmpWrap);

		List<GetContactListOutputDTOContacts> getcontactlistoutputdtocontactsTmpWrap = null;
		if (customer != null && customer.getCONTACT()  != null && !customer.getCONTACT().isEmpty()) getcontactlistoutputdtocontactsTmpWrap = new ArrayList<>();
		if (customer != null && customer.getCONTACT()  != null && !customer.getCONTACT().isEmpty()) {
		for (CONTACT contact : customer.getCONTACT()) {
			GetContactListOutputDTOContacts getcontactlistoutputdtocontactsTmp = new GetContactListOutputDTOContacts();	
			if (contact != null) getcontactlistoutputdtocontactsTmp.setCustomerid(contact.getCUSTOMERID());
			if (contact != null) getcontactlistoutputdtocontactsTmp.setContactid(contact.getCONTACTID());
			if (contact != null) getcontactlistoutputdtocontactsTmp.setInchargeid(contact.getINCHARGEID());
			if (contact != null) getcontactlistoutputdtocontactsTmp.setDescription(contact.getDESCRIPTION());
			if (contact != null) getcontactlistoutputdtocontactsTmp.setSalescd(contact.getSALESCD());
			if (contact != null) getcontactlistoutputdtocontactsTmp.setOzz(contact.getOZZ());
			if (contact != null) getcontactlistoutputdtocontactsTmp.setTime(contact.getTIME());
			getcontactlistoutputdtocontactsTmpWrap.add(getcontactlistoutputdtocontactsTmp);
		}
		}
		getcontactlistoutputdtoTmp.setContacts(getcontactlistoutputdtocontactsTmpWrap);

		return getcontactlistoutputdtoTmp;
	}}